class Solution {
public:
    int maxProfitHelper(vector<int>& prices, int idx, int canBuy, int** mem){
        //Base Case
        if(idx >= prices.size()){
            return 0;
        }
        
        if(mem[idx][canBuy] != -1){
            return mem[idx][canBuy];
        }
        
        //Recursive Calls
        int ans = 0;
        int ans1 = 0, ans2 = 0, ans3 = 0, ans4 = 0;
        if(canBuy){
           ans1 = (maxProfitHelper(prices, idx+1, 0, mem)-prices[idx]);
           ans2 = maxProfitHelper(prices, idx+1, 1, mem);
        }
        else{
           ans3 = (maxProfitHelper(prices, idx+2, 1, mem)+prices[idx]); 
           ans4 = maxProfitHelper(prices, idx+1, 0, mem);
        }
        
        int temp1 = max(ans1, ans2);
        int temp2 = max(ans3, ans4);
        ans = max(temp1, temp2);
        mem[idx][canBuy] = ans;
        return mem[idx][canBuy];
    }

    int maxProfit(vector<int>& prices) {
        int** mem = new int*[prices.size()];
        for(int i = 0; i < prices.size(); i++){
            mem[i] = new int[2];
            for(int j = 0; j < 2; j++){
                mem[i][j] = -1;
            }
        }
        
        return maxProfitHelper(prices, 0, 1, mem); 
    }
};
