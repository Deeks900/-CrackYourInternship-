class Solution {
public:
    static bool func(pair<int, int> a, pair<int, int> b){
        if(a.first > b.first){
            return true;
        }
        return false;
    }
    
    int maxPerformance(int n, vector<int>& speed, vector<int>& efficiency, int k) {
        vector<pair<int, int>> combine;
        for(int i = 0; i < n; i++){
            combine.push_back({efficiency[i], speed[i]});
        }
        
        
        sort(combine.begin(), combine.end(), func);

        long ans = 0;
        priority_queue<int, vector<int>, greater<int>> pq;
        long sum = 0;
        
        for(auto i: combine){
            int effCost = i.first;
            int speedCost = i.second;
            
            
                pq.push(speedCost);
                sum += speedCost;
            
            
            
            if(pq.size() > k){
                sum -= pq.top();
                pq.pop();
            }
                
    
            ans = max(ans, sum*effCost);
        }
        return ans%(int)(1e9+7);
    }
};
